/*
    This file is part of "GA4 Dataform Package".
    Copyright (C) 2023-2024 Superform Labs <support@ga4dataform.com>
    Artem Korneev, Jules Stuifbergen,
    Johan van de Werken, KrisztiÃ¡n Korpa,
    Simon Breton

    Do not redistribute this version! The open source version will become
    available at github.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 

*/

config {
  type: "table",
  tags: [dataform.projectConfig.vars.GA4_DATASET,"transactions","outputs"],
  schema: dataform.projectConfig.vars.OUTPUTS_DATASET,
  description: "transactions table with nested items, transaction totals and running totals (based on user_pseudo_id)",
  bigquery: {
    partitionBy: "transaction_date"
  },
    columns: require("includes/core/documentation/helpers.js").ga4Transactions
}

js {
    const { helpers } = require("includes/core/helpers");
    const config = helpers.getConfig();
}



with src as (
    select
      *,
      if(
        event_name = 'purchase',
        row_number() over (
          partition by coalesce(
            transaction_id,
            cast(event_id as string)
          )
          order by time.event_timestamp
        ),
        1
      ) as duplicate_count
    from ${ref("int_ga4_transactions")}
    -- if we want to dedupe, insert deduplication code here
    ${helpers.generateTransactionsDedupeSQL(config.TRANSACTIONS_DEDUPE)} -- rewrite
),

purchases as (
    -- select purchases only
    select
        * except(event_name, item_totals),
        struct(
            item_totals.quantity,
            item_totals.item_revenue,
            item_totals.item_revenue_in_usd,
            item_totals.coupons,
            item_totals.unique_coupons
        ) as item_totals,
        duplicate_count > 1 as is_duplicate,
        struct(
          if( uid is null, null, row_number() over user ) as transactions, 
          if( uid is null, null, sum(ecommerce.purchase_revenue) over user ) as purchase_revenue,
          if( uid is null, null, sum(ecommerce.purchase_revenue_in_usd) over user ) as purchase_revenue_in_usd,
          if( uid is null, null, sum(ecommerce.total_item_quantity) over user ) as total_item_quantity,
          -- calculate times between purchase in seconds, divide to get the granularity you want
          if(
            uid is null,
            null,
            timestamp_diff(
              time.event_timestamp_utc,
              lag(time.event_timestamp_utc) over user,
              second
            )
          ) as seconds_since_previous_purchase,
          if(
            uid is null,
            null,
            timestamp_diff(
              lead(time.event_timestamp_utc) over user,
              time.event_timestamp_utc,
              second
            ) 
          ) as seconds_to_next_purchase
        ) as running_totals,


    from src where event_name = 'purchase'
    window
      user as ( partition by uid order by time.event_timestamp ) -- this is windowing over a the configured column
),


refund_agg as (
    select
        transaction_id,
        count(*) as number_of_refunds,
        struct(
            min(time.event_timestamp_utc) as min_refund_timestamp,
            max(time.event_timestamp_utc) as max_refund_timestamp,
            struct(
                sum(item_totals.quantity) as quantity,
                sum(item_totals.item_refund_in_usd) as item_refund_in_usd,
                sum(item_totals.item_refund) as item_refund
            ) as refund_item_totals,
            array_agg(
                struct(
                    event_id,
                    session_id,
                    user_pseudo_id,
                    user_id,
                    uid,
                    stream_id,
                    platform,
                    time,
                    currency,
                    coupon,
                    items as items,
                    struct(
                        item_totals.quantity,
                        item_totals.item_refund_in_usd,
                        item_totals.item_refund,
                        item_totals.coupons,
                        item_totals.unique_coupons
                    ) as item_totals
                )
            ) as refunds
        ) as refund_info

    from src where event_name = 'refund'
    group by all
)

-- make totals agg: sum(revenue) - sum(abs(refund values))
, final as (
    select
        purchases.*,
        struct(
            item_totals.quantity - coalesce(abs(refund_info.refund_item_totals.quantity),0) as quantity,
            item_totals.item_revenue_in_usd - coalesce(abs(refund_info.refund_item_totals.item_refund_in_usd),0) as item_revenue_in_usd,
            item_totals.item_revenue - coalesce(abs(refund_info.refund_item_totals.item_refund),0) as item_revenue
        ) as net_item_totals,
        coalesce(sum(refund_agg.number_of_refunds),0) as number_of_refunds,
        refund_agg.* except(transaction_id, number_of_refunds)
    from purchases
    left join refund_agg using(transaction_id)
    group by all
)

select
    *
from final




