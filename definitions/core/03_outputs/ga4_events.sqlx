/*
    This file is part of "GA4 Dataform Package".
    Copyright (C) 2023-2024 Superform Labs <support@ga4dataform.com>
    Artem Korneev, Jules Stuifbergen,
    Johan van de Werken, KrisztiÃ¡n Korpa,
    Simon Breton

    Do not redistribute this version! The open source version will become
    available at github.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 

*/

config {
  type: "incremental",
  tags: [dataform.projectConfig.vars.GA4_DATASET,"events","outputs"],
  schema: dataform.projectConfig.vars.OUTPUTS_DATASET,
  description: "Output events table: unnested, cleaned, clustered data with several fixes",
  bigquery: {
    partitionBy: "event_date",
    clusterBy: [ "event_name", "session_id" ]
  },
    columns: require("includes/core/documentation/helpers.js").ga4Events
}



js {
  const { helpers } = require("includes/core/helpers");
  const config = helpers.getConfig();
  /* check if there's invalid columns or dupe columns in the custom column definitions */
  helpers.checkColumnNames(config);
}



/* incrementality */
pre_operations {
  declare date_checkpoint DATE
  ---
  set date_checkpoint = (
    ${when(incremental(),
    `select max(event_date)+1 from ${self()} where is_final = true`,
    `select date('${config.GA4_START_DATE}')`)}   /* the default, when it's not incremental */
  );
    -- delete some older data, since this may be updated later by GA4
  ${
    when(incremental(),
      `delete from ${self()} where event_date >= date_checkpoint`
      )
  }
}

with query_source as (

    select
      _table_suffix as table_suffix,
      *
    from ${ref("events_*")}
    where true

    -- incrementality clause
    and parse_date('%Y%m%d', regexp_extract(_table_suffix,'[0-9]+')) >= date_checkpoint

    -- filters go here

    -- intraday filter: exclude
    and contains_substr(_table_suffix, 'intraday') is false

    -- filters from config:
    -- discard unwanted events
    and ${helpers.generateFilterTypeFromListSQL("exclude", "event_name", config.EVENTS_TO_EXCLUDE)}
    -- discard unwanted hostnames
    and ${helpers.generateFilterTypeFromListSQL("exclude", "device.web_info.hostname", config.HOSTNAME_EXCLUDE)}
    -- only include wanted hostnames
    and ${helpers.generateFilterTypeFromListSQL("include", "device.web_info.hostname", config.HOSTNAME_INCLUDE_ONLY)}

    -- leave cookieless pings in - those will be in the events table do not have a session
    -- and user_pseudo_id is not null

),

step1 as (

  select

    -- first chunk: the basics
    event_name,
    table_suffix,
    parse_date('%Y%m%d', event_date) as event_date, -- partition column
    date_diff(current_date(), cast(event_date as date format 'YYYYMMDD'), day) > ${config.DATA_IS_FINAL_DAYS} as is_final, -- used for incrementality

    struct(
      -- timestamps
      event_timestamp,
      timestamp_micros(event_timestamp) as event_timestamp_utc,
      user_first_touch_timestamp as user_first_touch_timestamp,
      timestamp_micros(user_first_touch_timestamp) as user_first_touch_timestamp_utc    
    ) as time,
    
    -- user info
    user_pseudo_id,
    user_id,
    is_active_user,

    -- event info
    batch_event_index,
    batch_ordering_id,
    batch_page_id,

    -- now the structs - we will need to explicitly name ALL fields herein, as to not break incremental builds when Google adds a column in a struct
    -- privacy info
    struct(
      privacy_info.analytics_storage as analytics_storage,
      privacy_info.ads_storage as ads_storage,
      privacy_info.uses_transient_token as uses_transient_token
    ) as privacy_info,
    
    struct(
      collected_traffic_source.manual_campaign_id,
      collected_traffic_source.manual_campaign_name,
      collected_traffic_source.manual_source,
      collected_traffic_source.manual_medium,
      collected_traffic_source.manual_term,
      collected_traffic_source.manual_content,
      collected_traffic_source.manual_source_platform,
      collected_traffic_source.manual_creative_format,
      collected_traffic_source.manual_marketing_tactic,
      collected_traffic_source.gclid,
      collected_traffic_source.dclid,
      collected_traffic_source.srsltid
    ) as collected_traffic_source, -- as is. This will be fixed in the next step
    
    struct(
      struct(
        session_traffic_source_last_click.manual_campaign.campaign_id,
        session_traffic_source_last_click.manual_campaign.campaign_name,
        session_traffic_source_last_click.manual_campaign.source,
        session_traffic_source_last_click.manual_campaign.medium,
        session_traffic_source_last_click.manual_campaign.term,
        session_traffic_source_last_click.manual_campaign.content,
        session_traffic_source_last_click.manual_campaign.source_platform,
        session_traffic_source_last_click.manual_campaign.creative_format,
        session_traffic_source_last_click.manual_campaign.marketing_tactic
      ) as manual_campaign,
      struct(
        session_traffic_source_last_click.google_ads_campaign.customer_id,
        session_traffic_source_last_click.google_ads_campaign.account_name,
        session_traffic_source_last_click.google_ads_campaign.campaign_id,
        session_traffic_source_last_click.google_ads_campaign.campaign_name,
        session_traffic_source_last_click.google_ads_campaign.ad_group_id,
        session_traffic_source_last_click.google_ads_campaign.ad_group_name       
      ) as google_ads_campaign,
      struct(
        session_traffic_source_last_click.cross_channel_campaign.campaign_name,
        session_traffic_source_last_click.cross_channel_campaign.campaign_id,
        session_traffic_source_last_click.cross_channel_campaign.source,
        session_traffic_source_last_click.cross_channel_campaign.medium,
        session_traffic_source_last_click.cross_channel_campaign.source_platform,
        session_traffic_source_last_click.cross_channel_campaign.default_channel_group,
        session_traffic_source_last_click.cross_channel_campaign.primary_channel_group
      ) as cross_channel_campaign,
      struct(
        session_traffic_source_last_click.sa360_campaign.campaign_id,
        session_traffic_source_last_click.sa360_campaign.campaign_name,
        session_traffic_source_last_click.sa360_campaign.source,
        session_traffic_source_last_click.sa360_campaign.medium,
        session_traffic_source_last_click.sa360_campaign.ad_group_id,
        session_traffic_source_last_click.sa360_campaign.ad_group_name,
        session_traffic_source_last_click.sa360_campaign.creative_format,
        session_traffic_source_last_click.sa360_campaign.engine_account_name,
        session_traffic_source_last_click.sa360_campaign.engine_account_type,
        session_traffic_source_last_click.sa360_campaign.manager_account_name
      ) as sa360_campaign,
      struct(
        session_traffic_source_last_click.cm360_campaign.campaign_id,
        session_traffic_source_last_click.cm360_campaign.campaign_name,
        session_traffic_source_last_click.cm360_campaign.source,
        session_traffic_source_last_click.cm360_campaign.medium,
        session_traffic_source_last_click.cm360_campaign.account_id,
        session_traffic_source_last_click.cm360_campaign.account_name,
        session_traffic_source_last_click.cm360_campaign.advertiser_id,
        session_traffic_source_last_click.cm360_campaign.advertiser_name,
        session_traffic_source_last_click.cm360_campaign.creative_id,
        session_traffic_source_last_click.cm360_campaign.creative_format,
        session_traffic_source_last_click.cm360_campaign.creative_name,
        session_traffic_source_last_click.cm360_campaign.creative_type,
        session_traffic_source_last_click.cm360_campaign.creative_type_id,
        session_traffic_source_last_click.cm360_campaign.creative_version,
        session_traffic_source_last_click.cm360_campaign.placement_id,
        session_traffic_source_last_click.cm360_campaign.placement_cost_structure,
        session_traffic_source_last_click.cm360_campaign.placement_name,
        session_traffic_source_last_click.cm360_campaign.rendering_id,
        session_traffic_source_last_click.cm360_campaign.site_id,
        session_traffic_source_last_click.cm360_campaign.site_name
      ) as cm360_campaign,
      struct(
        session_traffic_source_last_click.dv360_campaign.campaign_id,
        session_traffic_source_last_click.dv360_campaign.campaign_name,
        session_traffic_source_last_click.dv360_campaign.source,
        session_traffic_source_last_click.dv360_campaign.medium,
        session_traffic_source_last_click.dv360_campaign.advertiser_id,
        session_traffic_source_last_click.dv360_campaign.advertiser_name,
        session_traffic_source_last_click.dv360_campaign.creative_id,
        session_traffic_source_last_click.dv360_campaign.creative_format,
        session_traffic_source_last_click.dv360_campaign.creative_name,
        session_traffic_source_last_click.dv360_campaign.exchange_id,
        session_traffic_source_last_click.dv360_campaign.exchange_name,
        session_traffic_source_last_click.dv360_campaign.insertion_order_id,
        session_traffic_source_last_click.dv360_campaign.insertion_order_name,
        session_traffic_source_last_click.dv360_campaign.line_item_id,
        session_traffic_source_last_click.dv360_campaign.line_item_name,
        session_traffic_source_last_click.dv360_campaign.partner_id,
        session_traffic_source_last_click.dv360_campaign.partner_name
      ) as dv360_campaign
    ) as session_traffic_source_last_click,

    struct(
        publisher.ad_format,
        publisher.ad_revenue_in_usd,
        publisher.ad_source_name,
        publisher.ad_unit_id
    ) as publisher,
    
    ecommerce, -- for now. Will be repacked and cleaned below in step 2

    struct(
        user_ltv.revenue,
        user_ltv.currency
    ) as user_ltv,

    struct(
      device.category,
      device.mobile_brand_name,
      device.mobile_model_name,
      device.mobile_marketing_name,
      device.mobile_os_hardware_model,
      device.operating_system,
      device.operating_system_version,
      device.vendor_id,
      device.advertising_id,
      device.language,
      device.is_limited_ad_tracking,
      device.time_zone_offset_seconds,
      struct(
        device.web_info.browser,
        device.web_info.browser_version,
        device.web_info.hostname
      ) as web_info
    ) as device,

    struct(
        app_info.id,
        app_info.version,
        app_info.install_store,
        app_info.firebase_app_id,
        app_info.install_source
    ) as app_info,

    struct(
        geo.continent,
        geo.country,
        geo.region,
        geo.city,
        geo.sub_continent,
        geo.metro
    ) as geo,

    struct(
        traffic_source.name as campaign_name,
        traffic_source.source,
        traffic_source.medium
    ) as first_user_traffic_source,

    stream_id,
    platform,
    '${dataform.projectConfig.vars.GA4_DATASET}' as property_id,

    -- repack the items array struct
    array(
      (
        select
          struct(
            items.item_id,
            items.item_name,
            items.item_brand,
            items.item_variant,
            items.item_category,
            items.item_category2,
            items.item_category3,
            items.item_category4,
            items.item_category5,
            items.price_in_usd,
            items.price,
            items.quantity,
            items.item_revenue_in_usd,
            items.item_revenue,
            items.item_refund_in_usd,
            items.item_refund,
            items.coupon,
            items.affiliation,
            items.location_id,
            items.item_list_id,
            items.item_list_name,
            items.item_list_index,
            items.promotion_id,
            items.promotion_name,
            items.creative_name,
            items.creative_slot
            ${when(config.CUSTOM_ITEM_PARAMS_ARRAY.length > 0,
                `, ${helpers.generateStructSQL(
                helpers.generateParamsSQL(
                    config.CUSTOM_ITEM_PARAMS_ARRAY, 
                    "items.item_params"
                )
            )
            } as item_params_custom`)}
          )
        from unnest(items) as items
      )
    ) as items,


    -- the programatically added SQL:
    -- grab all core event parameters
    ${helpers.generateStructSQL(helpers.generateParamsSQL(config.CORE_PARAMS_ARRAY))} as event_params,
    -- and the custom ones
    ${when(
      config.CUSTOM_EVENT_PARAMS_ARRAY.length > 0,
        `${helpers.generateStructSQL(helpers.generateParamsSQL(config.CUSTOM_EVENT_PARAMS_ARRAY))} as event_params_custom,`
      )} 
    -- add user_properties
    ${when(
      config.CUSTOM_USER_PROPERTIES_ARRAY.length > 0,      
        `${helpers.generateStructSQL(helpers.generateParamsSQL(config.CUSTOM_USER_PROPERTIES_ARRAY,'user_properties'))} as user_properties,`
      )}


  from query_source

),

step2 as (
  -- small cleanups
  -- in July 2024, the batch_* event parameters were moved to a column. This is for backwards compatibility, let's move this too.
  select
    * except(
      ecommerce,
      batch_event_index,
      batch_ordering_id,
      batch_page_id
    ),
    
    struct(
      batch_event_index,
      coalesce(batch_ordering_id, event_params.batch_ordering_id) as batch_ordering_id,
      coalesce(batch_page_id, event_params.batch_page_id) as batch_page_id
    ) as batch,

    -- repack ecommerce struct
    -- fix transaction_id, change to NULL if "(not set)"
    -- also remove NANs in ecommerce struct
    struct(
        ecommerce.total_item_quantity,
        if(is_nan(ecommerce.purchase_revenue_in_usd), 0,ecommerce.purchase_revenue_in_usd) as purchase_revenue_in_usd,
        if(is_nan(ecommerce.purchase_revenue), 0,ecommerce.purchase_revenue) as purchase_revenue,
        if(is_nan(ecommerce.refund_value_in_usd), 0,ecommerce.refund_value_in_usd) as refund_value_in_usd,
        if(is_nan(ecommerce.refund_value), 0,ecommerce.refund_value) as refund_value,
        if(is_nan(ecommerce.shipping_value_in_usd), 0,ecommerce.shipping_value_in_usd) as shipping_value_in_usd,
        if(is_nan(ecommerce.shipping_value), 0,ecommerce.shipping_value) as shipping_value,
        if(is_nan(ecommerce.tax_value_in_usd), 0,ecommerce.tax_value_in_usd) as tax_value_in_usd,
        if(is_nan(ecommerce.tax_value), 0,ecommerce.tax_value) as tax_value,
        ecommerce.unique_items,
        if(ecommerce.transaction_id = '(not set)', null, ecommerce.transaction_id) as transaction_id
    ) as ecommerce

  from step1
),

step3 as (
  -- repack extracted parameters to cleaner structs, and create event_id

  select
    *,
    -- standard url parameters from config
    ${helpers.generateStructSQL(helpers.generateURLParamsSQL(
      'event_params.page_location',
      config.URL_PARAMS_ARRAY
    ))} as url_params,

    -- custom url parameters from config
    ${when(
      config.CUSTOM_URL_PARAMS_ARRAY.length > 0,      
        `${helpers.generateStructSQL(helpers.generateURLParamsSQL(
        'event_params.page_location',
        config.CUSTOM_URL_PARAMS_ARRAY
        ))} as url_params_custom,`
      )}

    -- click IDs from config
    ${helpers.generateStructSQL(helpers.generateURLParamsSQL(
      'event_params.page_location',
      config.CLICK_IDS_ARRAY,
      false
    ))} as click_ids,
    -- create event ID
    farm_fingerprint(
      event_name ||
      time.event_timestamp ||
      coalesce(user_pseudo_id, 'no') ||
      coalesce(event_params.ga_session_id, 0) ||
      coalesce(batch.batch_page_id, 0) ||
      coalesce(batch.batch_ordering_id,0) ||
      coalesce(batch.batch_event_index,0) ||
      coalesce(event_params.engagement_time_msec, 0)
    ) as event_id
  from step2
),

step4 as (
select
  * 
from step3
where true
-- final filter: discard audience events
and (event_params.synthetic_bundle is null or event_params.synthetic_bundle != 1)
),

step5 as (

  select
    * except (
        click_ids
       ),
    -- create a traffic source struct with
    -- 1. the manual params
    -- 2. if not present: for backwards compatibility: use event params
    -- 3. if not present: use the utm params - but not on later batches, since collected_traffic_source is always null on those hits.
    -- (and yes, that is annoying).
    -- PS: in the pre-batch_ordering_id era, this will work too, since if(NULL, NULL, use params) uses params
    struct(
        lower(coalesce(collected_traffic_source.manual_campaign_id,     if(batch.batch_ordering_id >1, NULL, url_params.utm_id))) as campaign_id,
        lower(coalesce(collected_traffic_source.manual_campaign_name,   if(batch.batch_ordering_id >1, NULL, coalesce(event_params.campaign, url_params.utm_campaign)))) as campaign,
        lower(coalesce(collected_traffic_source.manual_source,          if(batch.batch_ordering_id >1, NULL, coalesce(event_params.source, url_params.utm_source)))) as source,
        lower(coalesce(collected_traffic_source.manual_medium,          if(batch.batch_ordering_id >1, NULL, coalesce(event_params.medium, url_params.utm_medium)))) as medium,
        lower(coalesce(collected_traffic_source.manual_term,            if(batch.batch_ordering_id >1, NULL, coalesce(event_params.term, url_params.utm_term)))) as term,
        lower(coalesce(collected_traffic_source.manual_content,         if(batch.batch_ordering_id >1, NULL, coalesce(event_params.content, url_params.utm_content)))) as content,
        lower(coalesce(collected_traffic_source.manual_source_platform, if(batch.batch_ordering_id >1, NULL, url_params.utm_source_platform))) as source_platform,
        lower(coalesce(collected_traffic_source.manual_creative_format, if(batch.batch_ordering_id >1, NULL, url_params.utm_creative_format))) as creative_format,
        lower(coalesce(collected_traffic_source.manual_marketing_tactic,if(batch.batch_ordering_id >1, NULL, url_params.utm_marketing_tactic))) as marketing_tactic
      ) as fixed_traffic_source,
    -- put all the click ids (from config) in a seperate struct
    struct(
      ${config.CLICK_IDS_ARRAY.map(id =>helpers.generateClickIdCoalesceSQL(id)).join(", ")}
    ) as click_ids

  from step4
  where event_date >= date_checkpoint

),

-- remove brackets from source/medium for organic and referral

fixed as (

  select
    * except (
      fixed_traffic_source
    ),

    -- fix misattribution issues
    struct(
      fixed_traffic_source.campaign_id,
    -- only rewrite campaign if it is organic or referral
      case
          when (
            (coalesce(fixed_traffic_source.campaign, "") in ("(organic)", "(referral)", ""))
            or fixed_traffic_source.campaign is null
          ) 
          then 
            case
              ${helpers.generateClickIdCasesSQL("campaign",config.CLICK_IDS_ARRAY)}
            else fixed_traffic_source.campaign
        end
      else fixed_traffic_source.campaign  
      end as campaign,


      case    
        -- page_referrer contains "android-app://com.google" then 'google'
        when fixed_traffic_source.source is null and event_params.page_referrer like '%android-app://com.google%'
        then 'google'
        
        -- use the domain name if the referrer is non-google android
        when fixed_traffic_source.source is null and event_params.page_referrer like '%android-app%'
        then net.host(event_params.page_referrer)

        when fixed_traffic_source.source is null and event_params.ignore_referrer != 'true' and event_params.page_referrer is not null
        then net.host(event_params.page_referrer)

        when (
            (fixed_traffic_source.source is not null and coalesce(fixed_traffic_source.campaign, "") in ("(organic)", "(referral)", ""))
            or (fixed_traffic_source.source is null and fixed_traffic_source.campaign is null)
          ) 
          then 
            case
              ${helpers.generateClickIdCasesSQL("source",config.CLICK_IDS_ARRAY)}
            else fixed_traffic_source.source
          end
        else fixed_traffic_source.source
      end as source,

      case
        when (
            (fixed_traffic_source.medium is not null and coalesce(fixed_traffic_source.campaign, "") in ("(organic)", "(referral)", ""))
            or (fixed_traffic_source.medium is null and fixed_traffic_source.campaign is null)
          ) 
          then 
            case
              ${helpers.generateClickIdCasesSQL("medium",config.CLICK_IDS_ARRAY)}
            else fixed_traffic_source.medium
          end

        -- page_referrer contains "android-app" then 'organic' (cpc is handled above)
        when fixed_traffic_source.medium is null and event_params.page_referrer like '%android-app://com.google%'
        then 'organic'
        
        -- page_referrer contains "android-app" and is one of social platforms then 'social'
        when fixed_traffic_source.medium is null and regexp_contains(event_params.page_referrer, r'^android-app.*(${config.SOCIAL_PLATFORMS_REGEX}).*')
        then 'social'
        
        -- page_referrer contains "android-app", fall back to "android-app"
        when fixed_traffic_source.medium is null and event_params.page_referrer like '%android-app%'
        then 'android-app'

        when fixed_traffic_source.medium is null and event_params.ignore_referrer != 'true' and event_params.page_referrer is not null
        then 'referral'

        else fixed_traffic_source.medium

      end as medium,
      fixed_traffic_source.term,
      fixed_traffic_source.content,
      fixed_traffic_source.source_platform,
      fixed_traffic_source.creative_format,
      fixed_traffic_source.marketing_tactic
    ) as fixed_traffic_source,

    -- recast
    -- safe_cast(session_engaged as INT64) as session_engaged


  from step5
),


add_meta_info as (
  select
   * except(
        time
      ),
    (
        select as struct
          time.*,
          datetime(time.event_timestamp_utc, '${dataform.projectConfig.vars.LOCAL_TIMEZONE}') as timestamp_local,
          date(datetime(time.event_timestamp_utc, '${dataform.projectConfig.vars.LOCAL_TIMEZONE}')) as date_local
    ) time,
    -- try to guess if this is a MP hit
    if(device.language is null and device.operating_system is null and device.category = 'desktop',
       true,
       false
    ) as is_measurement_protocol_hit,

    -- make session_id - can be NULL (if anonymous ping or MP hit without session_id)
    farm_fingerprint(
      user_pseudo_id || event_params.ga_session_id
     ) as session_id,

    -- all page information in a page struct
    struct (
       lower(net.host(event_params.page_location)) as hostname,
       event_params.page_location as location,
       -- strip and leave only path - https://www.rfc-editor.org/rfc/rfc3986#appendix-B - not lowering, urls are case sensitive
       regexp_extract(event_params.page_location, r'^(?:(?:[^:\/?#]+):)?(?:\/\/(?:[^\/?#]*))?([^?#]*)(?:\?(?:[^#]*))?(?:#(?:.*))?') as path,
       event_params.page_referrer as referrer,
       event_params.page_title as title
      ) as page,

    -- is this a hit with source? Or: not direct/none or when we have a source or medium
    case
        when (fixed_traffic_source.source != 'direct' and fixed_traffic_source.medium != 'none') then true
        when (coalesce(fixed_traffic_source.source, fixed_traffic_source.medium) is not null) then true
    else false end as has_source,

  from fixed
),

-- dedupe based on event_id and remove redundant event_params
deduped as (
  select
    * replace ((select as struct event_params.* except (
                  batch_ordering_id,
                  batch_page_id,
                  page_location,
                  page_referrer,
                  page_title
                  )) as event_params),
  from add_meta_info
  qualify row_number() over ( partition by event_id ) = 1
),

add_row_numbers as (
  select
    *,
    struct(
    -- calculate hit numbers per session (now is the time)
    if(user_pseudo_id is not null and event_params.ga_session_id is not null,
        row_number() over (
          partition by user_pseudo_id, event_params.ga_session_id
          order by time.event_timestamp asc
        ),
        null
     ) as hit_number,

    -- and page number
    if(user_pseudo_id is not null and event_params.ga_session_id is not null and batch.batch_page_id is not null,
        dense_rank() over (
          partition by user_pseudo_id, event_params.ga_session_id
          order by batch.batch_page_id asc
        ),
        null
     ) as page_number
    ) as session_info

  from deduped
)


select
  current_timestamp() as _run_timestamp, -- indicates when the row was last run
  *
from add_row_numbers
where true



